import { AlertCircle,ArrowLeft, Check, Copy, Download, Loader2 } from 'lucide-react';
import { useEffect,useState } from 'react';

import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useGenerateYaml } from '@/hooks/mutations/useGenerateYaml';
import { useVoiceCasting } from '@/stores/appStore';

interface CharacterData {
  name: string;
  displayName: string;
  lineCount: number;
  totalCharacters: number;
  longestDialogue: number;
  isNarrator: boolean;
  assignedVoice: {
    provider: string;
    voiceName: string;
    voiceId: string; // This represents sts_id but keeps the old name for interface compatibility
  } | null;
}

interface YamlPreviewProps {
  characters: CharacterData[];
  onBack: () => void;
  onExport: () => void;
}

export function YamlPreview({ characters, onBack, onExport }: YamlPreviewProps) {
  const [copied, setCopied] = useState(false);
  const { yamlContent } = useVoiceCasting();
  const generateYamlMutation = useGenerateYaml();
  
  // Generate YAML when component mounts or when requested
  useEffect(() => {
    if (!yamlContent) {
      generateYamlMutation.mutate({ includeMetadata: true });
    }
  }, []);

  // Fallback local generation if mutation not available
  const generateLocalYaml = () => {
    const lines: string[] = [];
    
    // Header comment
    lines.push('# Voice configuration for screenplay characters');
    lines.push('# Generated by Script to Speech Voice Casting Tool');
    lines.push(`# Generated at: ${new Date().toISOString()}`);
    lines.push('');

    // Group characters by provider
    const byProvider: Record<string, CharacterData[]> = {};
    const unassigned: CharacterData[] = [];

    characters.forEach(char => {
      if (char.assignedVoice) {
        const provider = char.assignedVoice.provider;
        if (!byProvider[provider]) {
          byProvider[provider] = [];
        }
        byProvider[provider].push(char);
      } else {
        unassigned.push(char);
      }
    });

    // Write assigned characters grouped by provider
    Object.entries(byProvider).forEach(([provider, chars]) => {
      lines.push(`# ${provider.toUpperCase()} Configuration`);
      
      chars.forEach(char => {
        lines.push('');
        lines.push(`# ${char.displayName}: ${char.lineCount} lines`);
        lines.push(`# Total characters: ${char.totalCharacters}, Longest dialogue: ${char.longestDialogue} characters`);
        lines.push(`${char.name}:`);
        lines.push(`  provider: ${char.assignedVoice!.provider}`);
        
        // Use the actual sts_id format
        lines.push(`  sts_id: ${char.assignedVoice!.voiceId}`);
        
        // Add provider-specific config if needed
        if (provider === 'openai') {
          lines.push(`  voice: ${char.assignedVoice!.voiceId}`);
        }
      });
      lines.push('');
    });

    // Write unassigned characters
    if (unassigned.length > 0) {
      lines.push('# UNASSIGNED CHARACTERS - Please assign voices to these characters');
      unassigned.forEach(char => {
        lines.push('');
        lines.push(`# ${char.displayName}: ${char.lineCount} lines`);
        lines.push(`# Total characters: ${char.totalCharacters}, Longest dialogue: ${char.longestDialogue} characters`);
        lines.push(`${char.name}:`);
        lines.push(`  provider:`);
        lines.push(`  sts_id:`);
        lines.push(`  # Add provider-specific configuration here`);
      });
    }

    return lines.join('\n');
  };

  // Use generated YAML from mutation if available, otherwise use local generation
  const displayYaml = yamlContent || generateLocalYaml();

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(displayYaml);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      // Failed to copy to clipboard
    }
  };
  
  const handleExport = () => {
    // Create a blob and download it
    const blob = new Blob([displayYaml], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'voice_config.yaml';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    // Call the parent's onExport callback
    onExport();
  };

  // Generate statistics
  const stats = {
    totalCharacters: characters.length,
    assignedCharacters: characters.filter(c => c.assignedVoice).length,
    providers: [...new Set(characters.filter(c => c.assignedVoice).map(c => c.assignedVoice!.provider))],
    totalLines: characters.reduce((sum, c) => sum + c.lineCount, 0),
  };

  return (
    <div className="container max-w-6xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={onBack}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold">Preview Configuration</h1>
            <p className="text-muted-foreground">Review and export your voice casting configuration</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={handleCopy}>
            {copied ? (
              <>
                <Check className="h-4 w-4 mr-2" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="h-4 w-4 mr-2" />
                Copy to Clipboard
              </>
            )}
          </Button>
          <Button onClick={handleExport}>
            <Download className="h-4 w-4 mr-2" />
            Download YAML
          </Button>
        </div>
      </div>

      <Tabs defaultValue="preview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="preview">Preview</TabsTrigger>
          <TabsTrigger value="statistics">Statistics</TabsTrigger>
        </TabsList>

        <TabsContent value="preview" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>YAML Configuration</CardTitle>
              <CardDescription>
                This configuration file can be used with the sts-generate-audio command
              </CardDescription>
            </CardHeader>
            <CardContent>
              {generateYamlMutation.isPending ? (
                <div className="flex items-center justify-center h-[600px]">
                  <div className="text-center space-y-4">
                    <Loader2 className="h-8 w-8 animate-spin mx-auto text-muted-foreground" />
                    <p className="text-muted-foreground">Generating YAML configuration...</p>
                  </div>
                </div>
              ) : generateYamlMutation.isError ? (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    Failed to generate YAML: {generateYamlMutation.error?.message}
                  </AlertDescription>
                </Alert>
              ) : (
                <ScrollArea className="h-[600px] w-full rounded-md border">
                  <pre className="p-4 text-sm">
                    <code>{displayYaml}</code>
                  </pre>
                </ScrollArea>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="statistics" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Assignment Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Total Characters:</span>
                  <span className="font-medium">{stats.totalCharacters}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Assigned:</span>
                  <span className="font-medium text-green-600">{stats.assignedCharacters}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Unassigned:</span>
                  <span className="font-medium text-orange-600">
                    {stats.totalCharacters - stats.assignedCharacters}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Total Lines:</span>
                  <span className="font-medium">{stats.totalLines}</span>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Provider Distribution</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {stats.providers.map(provider => {
                  const count = characters.filter(
                    c => c.assignedVoice?.provider === provider
                  ).length;
                  return (
                    <div key={provider} className="flex justify-between">
                      <span className="text-muted-foreground capitalize">{provider}:</span>
                      <span className="font-medium">{count} characters</span>
                    </div>
                  );
                })}
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Character Details</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {characters.map(char => (
                  <div key={char.name} className="flex items-center justify-between py-2 border-b last:border-0">
                    <div className="flex items-center gap-4">
                      <span className="font-medium">{char.displayName}</span>
                      <span className="text-sm text-muted-foreground">
                        {char.lineCount} lines
                      </span>
                    </div>
                    <div>
                      {char.assignedVoice ? (
                        <span className="text-sm">
                          <span className="capitalize">{char.assignedVoice.provider}</span> - {char.assignedVoice.voiceName}
                        </span>
                      ) : (
                        <span className="text-sm text-orange-600">Unassigned</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}