import {
  AlertCircle,
  ArrowLeft,
  Check,
  Copy,
  Download,
  Loader2,
} from 'lucide-react';
import { useEffect, useState } from 'react';

import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useVoiceCasting } from '@/stores/appStore';
import { yamlUtils } from '@/utils/yamlUtils';

interface YamlPreviewProps {
  onBack: () => void;
  onExport: () => void;
}

export function YamlPreview({ onBack, onExport }: YamlPreviewProps) {
  const [copied, setCopied] = useState(false);
  const [yamlContent, setYamlContent] = useState<string | undefined>(undefined);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | undefined>(undefined);
  const { assignments, screenplayData } = useVoiceCasting();

  // Generate YAML when component mounts or when assignments exist
  useEffect(() => {
    const generateYaml = async () => {
      if (!yamlContent && assignments.size > 0 && screenplayData) {
        setIsGenerating(true);
        setError(undefined);

        try {
          // Convert character data to array for yamlUtils
          const characterInfo = Array.from(screenplayData.characters.values());

          // Use yamlUtils to generate YAML directly from store data
          // This preserves all imported data: sts_id, casting_notes, roles, etc.
          const generatedYaml = await yamlUtils.assignmentsToYaml(
            assignments,
            characterInfo
          );
          setYamlContent(generatedYaml);
        } catch (err) {
          setError(
            err instanceof Error ? err.message : 'Failed to generate YAML'
          );
        } finally {
          setIsGenerating(false);
        }
      }
    };

    generateYaml();
  }, [yamlContent, assignments, screenplayData]);

  // Fallback local generation if mutation not available
  const generateLocalYaml = () => {
    const lines: string[] = [];

    // Header comment
    lines.push('# Voice configuration for screenplay characters');
    lines.push('# Generated by Script to Speech Voice Casting Tool');
    lines.push(`# Generated at: ${new Date().toISOString()}`);
    lines.push('');

    // If no assignments, show message
    if (assignments.size === 0) {
      lines.push('# No voice assignments found');
      lines.push('# Import a YAML file or assign voices to characters');
      return lines.join('\n');
    }

    // Generate YAML from assignments in store
    Array.from(assignments.entries()).forEach(([characterName, assignment]) => {
      const characterInfo = screenplayData?.characters?.get(characterName);

      // Add character comments if available
      if (characterInfo) {
        lines.push(`# ${characterName}: ${characterInfo.lineCount} lines`);
        lines.push(
          `# Total characters: ${characterInfo.totalCharacters || 0}, Longest dialogue: ${characterInfo.longestDialogue || 0} characters`
        );

        // Add casting notes and role if available
        if (assignment.castingNotes) {
          lines.push(`# Casting notes: ${assignment.castingNotes}`);
        }
        if (assignment.role) {
          lines.push(`# Role: ${assignment.role}`);
        }
      }

      // Add character assignment
      lines.push(`${characterName}:`);
      lines.push(`  provider: ${assignment.provider}`);

      if (assignment.sts_id) {
        lines.push(`  sts_id: ${assignment.sts_id}`);
      }

      // Add provider config fields
      if (assignment.provider_config) {
        Object.entries(assignment.provider_config).forEach(([key, value]) => {
          if (key !== 'provider' && key !== 'sts_id') {
            lines.push(`  ${key}: ${value}`);
          }
        });
      }

      lines.push('');
    });

    return lines.join('\n');
  };

  // Use generated YAML from mutation if available, otherwise use local generation
  const displayYaml = yamlContent || generateLocalYaml();

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(displayYaml);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch {
      // Failed to copy to clipboard
    }
  };

  const handleExport = () => {
    // Create a blob and download it
    const blob = new Blob([displayYaml], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'voice_config.yaml';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    // Call the parent's onExport callback
    onExport();
  };

  // Generate statistics from voice casting store
  const stats = {
    totalCharacters: screenplayData?.characters.size || 0,
    assignedCharacters: assignments.size,
    providers: [
      ...new Set(
        Array.from(assignments.values()).map(
          (assignment) => assignment.provider
        )
      ),
    ],
    totalLines: Array.from(screenplayData?.characters.values() || []).reduce(
      (sum, c) => sum + c.lineCount,
      0
    ),
  };

  return (
    <div className="container mx-auto max-w-6xl space-y-6 p-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="icon" onClick={onBack}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold">Preview Configuration</h1>
            <p className="text-muted-foreground">
              Review and export your voice casting configuration
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" onClick={handleCopy}>
            {copied ? (
              <>
                <Check className="mr-2 h-4 w-4" />
                Copied!
              </>
            ) : (
              <>
                <Copy className="mr-2 h-4 w-4" />
                Copy to Clipboard
              </>
            )}
          </Button>
          <Button onClick={handleExport}>
            <Download className="mr-2 h-4 w-4" />
            Download YAML
          </Button>
        </div>
      </div>

      <Tabs defaultValue="preview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="preview">Preview</TabsTrigger>
          <TabsTrigger value="statistics">Statistics</TabsTrigger>
        </TabsList>

        <TabsContent value="preview" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>YAML Configuration</CardTitle>
              <CardDescription>
                This configuration file can be used with the sts-generate-audio
                command
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isGenerating ? (
                <div className="flex h-[600px] items-center justify-center">
                  <div className="space-y-4 text-center">
                    <Loader2 className="text-muted-foreground mx-auto h-8 w-8 animate-spin" />
                    <p className="text-muted-foreground">
                      Generating YAML configuration...
                    </p>
                  </div>
                </div>
              ) : error ? (
                <Alert variant="destructive">
                  <AlertCircle className="h-4 w-4" />
                  <AlertDescription>
                    Failed to generate YAML: {error}
                  </AlertDescription>
                </Alert>
              ) : (
                <ScrollArea className="h-[600px] w-full rounded-md border">
                  <pre className="p-4 text-sm">
                    <code>{displayYaml}</code>
                  </pre>
                </ScrollArea>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="statistics" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Assignment Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">
                    Total Characters:
                  </span>
                  <span className="font-medium">{stats.totalCharacters}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Assigned:</span>
                  <span className="font-medium text-green-600">
                    {stats.assignedCharacters}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Unassigned:</span>
                  <span className="font-medium text-orange-600">
                    {stats.totalCharacters - stats.assignedCharacters}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">Total Lines:</span>
                  <span className="font-medium">{stats.totalLines}</span>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Provider Distribution</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {stats.providers.map((provider) => {
                  const count = Array.from(assignments.values()).filter(
                    (assignment) => assignment.provider === provider
                  ).length;
                  return (
                    <div key={provider} className="flex justify-between">
                      <span className="text-muted-foreground capitalize">
                        {provider}:
                      </span>
                      <span className="font-medium">{count} characters</span>
                    </div>
                  );
                })}
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Character Details</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {Array.from(screenplayData?.characters.entries() || []).map(
                  ([characterName, characterInfo]) => {
                    const assignment = assignments.get(characterName);
                    const displayName =
                      characterName === 'default' ? 'Narrator' : characterName;

                    return (
                      <div
                        key={characterName}
                        className="flex items-center justify-between border-b py-2 last:border-0"
                      >
                        <div className="flex items-center gap-4">
                          <span className="font-medium">{displayName}</span>
                          <span className="text-muted-foreground text-sm">
                            {characterInfo.lineCount} lines
                          </span>
                        </div>
                        <div>
                          {assignment ? (
                            <span className="text-sm">
                              <span className="capitalize">
                                {assignment.provider}
                              </span>{' '}
                              - {assignment.sts_id || 'Custom voice'}
                            </span>
                          ) : (
                            <span className="text-sm text-orange-600">
                              Unassigned
                            </span>
                          )}
                        </div>
                      </div>
                    );
                  }
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
