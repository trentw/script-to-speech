/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TtsRouteImport } from './routes/tts'
import { Route as ScreenplayRouteRouteImport } from './routes/screenplay/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ScreenplayIndexRouteImport } from './routes/screenplay/index'
import { Route as ScreenplayTaskIdRouteImport } from './routes/screenplay/$taskId'

const TtsRoute = TtsRouteImport.update({
  id: '/tts',
  path: '/tts',
  getParentRoute: () => rootRouteImport,
} as any)
const ScreenplayRouteRoute = ScreenplayRouteRouteImport.update({
  id: '/screenplay',
  path: '/screenplay',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ScreenplayIndexRoute = ScreenplayIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ScreenplayRouteRoute,
} as any)
const ScreenplayTaskIdRoute = ScreenplayTaskIdRouteImport.update({
  id: '/$taskId',
  path: '/$taskId',
  getParentRoute: () => ScreenplayRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/screenplay': typeof ScreenplayRouteRouteWithChildren
  '/tts': typeof TtsRoute
  '/screenplay/$taskId': typeof ScreenplayTaskIdRoute
  '/screenplay/': typeof ScreenplayIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tts': typeof TtsRoute
  '/screenplay/$taskId': typeof ScreenplayTaskIdRoute
  '/screenplay': typeof ScreenplayIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/screenplay': typeof ScreenplayRouteRouteWithChildren
  '/tts': typeof TtsRoute
  '/screenplay/$taskId': typeof ScreenplayTaskIdRoute
  '/screenplay/': typeof ScreenplayIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/screenplay'
    | '/tts'
    | '/screenplay/$taskId'
    | '/screenplay/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tts' | '/screenplay/$taskId' | '/screenplay'
  id:
    | '__root__'
    | '/'
    | '/screenplay'
    | '/tts'
    | '/screenplay/$taskId'
    | '/screenplay/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ScreenplayRouteRoute: typeof ScreenplayRouteRouteWithChildren
  TtsRoute: typeof TtsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tts': {
      id: '/tts'
      path: '/tts'
      fullPath: '/tts'
      preLoaderRoute: typeof TtsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/screenplay': {
      id: '/screenplay'
      path: '/screenplay'
      fullPath: '/screenplay'
      preLoaderRoute: typeof ScreenplayRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/screenplay/': {
      id: '/screenplay/'
      path: '/'
      fullPath: '/screenplay/'
      preLoaderRoute: typeof ScreenplayIndexRouteImport
      parentRoute: typeof ScreenplayRouteRoute
    }
    '/screenplay/$taskId': {
      id: '/screenplay/$taskId'
      path: '/$taskId'
      fullPath: '/screenplay/$taskId'
      preLoaderRoute: typeof ScreenplayTaskIdRouteImport
      parentRoute: typeof ScreenplayRouteRoute
    }
  }
}

interface ScreenplayRouteRouteChildren {
  ScreenplayTaskIdRoute: typeof ScreenplayTaskIdRoute
  ScreenplayIndexRoute: typeof ScreenplayIndexRoute
}

const ScreenplayRouteRouteChildren: ScreenplayRouteRouteChildren = {
  ScreenplayTaskIdRoute: ScreenplayTaskIdRoute,
  ScreenplayIndexRoute: ScreenplayIndexRoute,
}

const ScreenplayRouteRouteWithChildren = ScreenplayRouteRoute._addFileChildren(
  ScreenplayRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ScreenplayRouteRoute: ScreenplayRouteRouteWithChildren,
  TtsRoute: TtsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
